name: Build and Run End-to-End Tests

on:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Build with Gradle
        working-directory: ./
        run: |
          chmod +x gradlew
          make binaries
          make build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pkg-build
          path: ./

  e2e_test:
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    strategy:
      matrix:
        app:
          - { name: SpringBootPostgres, test_file: end2end/spring_boot_postgres.py }
          - { name: SpringBootMySQL, test_file: end2end/spring_boot_mysql.py }
          - { name: SpringBootMSSQL, test_file: end2end/spring_boot_mssql.py }
          - { name: SpringWebfluxSampleApp, test_file: end2end/spring_webflux_postgres.py }
          - { name: SpringMVCPostgresKotlin, test_file: end2end/spring_mvc_postgres_kotlin.py }
          - { name: SpringMVCPostgresGroovy, test_file: end2end/spring_mvc_postgres_groovy.py }
          - { name: JavalinPostgres, test_file: end2end/javalin_postgres.py }
          - { name: JavalinMySQLKotlin, test_file: end2end/javalin_mysql_kotlin.py }
          - { name: SpringBoot2.7Postgres, test_file: end2end/spring_boot_2.7_postgres.py }
        java-version: [17, 18, 19, 20, 21]
        distribution: ['adopt', 'corretto', 'oracle']
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: pkg-build

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: ${{ matrix.distribution }}

      - name: Start mock server
        working-directory: ./end2end/server
        run: |
          docker build -t mock_core .
          docker run --name mock_core -d -p 5000:5000 mock_core
      - name: Start databases
        working-directory: ./sample-apps/databases
        run: |
          docker compose down --volumes
          docker compose up --build -d
      - name: Install Python dependencies
        run: python -m pip install -r end2end/requirements.txt

      - name: Build Application (ensures cache)
        working-directory: ./sample-apps/${{ matrix.app.name }}
        run: |
          make build

      - name: Start Application (with and without Zen)
        working-directory: ./sample-apps/${{ matrix.app.name }}
        run: |
          nohup make runWithoutZen > output_without_zen.log & sleep 5
          nohup make run > output.log & sleep 5

      - name: Run End-to-End tests
        working-directory: ./
        run: tail -f ./sample-apps/${{ matrix.app.name }}/output.log && python ${{ matrix.app.test_file }}
