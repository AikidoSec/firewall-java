package dev.aikido.agent_api.vulnerabilities;

import dev.aikido.agent_api.background.Endpoint;
import dev.aikido.agent_api.context.ContextObject;
import dev.aikido.agent_api.storage.ServiceConfiguration;
import dev.aikido.agent_api.thread_cache.ThreadCache;
import dev.aikido.agent_api.thread_cache.ThreadCacheObject;

import java.util.List;

import static dev.aikido.agent_api.helpers.patterns.MatchEndpoints.matchEndpoints;
import static dev.aikido.agent_api.storage.ServiceConfigStore.getConfig;

public final class SkipVulnerabilityScanDecider {
    private SkipVulnerabilityScanDecider() {}
    public static boolean shouldSkipVulnerabilityScan(ContextObject context) {
        if (context == null) {
            return true;
        }
        ServiceConfiguration config = getConfig();
        List<Endpoint> matchedEndpoints = matchEndpoints(context.getRouteMetadata(), config.getEndpoints());
        if (matchedEndpoints != null) {
            // Protection is forced off on one or more of the matched endpoints
            return matchedEndpoints.stream().anyMatch(Endpoint::protectionForcedOff);
        }
        return false;
    }
}
